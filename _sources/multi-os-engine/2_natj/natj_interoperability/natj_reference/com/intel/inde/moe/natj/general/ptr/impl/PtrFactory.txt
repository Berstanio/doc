.. java:import:: java.nio Buffer

.. java:import:: java.nio ByteBuffer

.. java:import:: java.nio CharBuffer

.. java:import:: java.nio DoubleBuffer

.. java:import:: java.nio FloatBuffer

.. java:import:: java.nio IntBuffer

.. java:import:: java.nio LongBuffer

.. java:import:: java.nio ShortBuffer

.. java:import:: com.intel.inde.moe.natj.c CRuntime

.. java:import:: com.intel.inde.moe.natj.c OpaquePtr

.. java:import:: com.intel.inde.moe.natj.c StructObject

.. java:import:: com.intel.inde.moe.natj.general.ptr BoolPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr BytePtr

.. java:import:: com.intel.inde.moe.natj.general.ptr CharPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr ConstVoidPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr DoublePtr

.. java:import:: com.intel.inde.moe.natj.general.ptr FloatPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr IntPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr LongPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr NFloatPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr NIntPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr NUIntPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr Ptr

.. java:import:: com.intel.inde.moe.natj.general.ptr ShortPtr

.. java:import:: com.intel.inde.moe.natj.general.ptr VoidPtr

.. java:import:: com.intel.inde.moe.natj.objc ObjCObject

PtrFactory
==========

.. java:package:: com.intel.inde.moe.natj.general.ptr.impl
   :noindex:

.. java:type:: public final class PtrFactory

   Factory for pointer objects.

Methods
-------
newBoolArray
^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolArray(int capacity)
   :outertype: PtrFactory

   Create a new boolean pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created boolean array

newBoolArray
^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolArray(int capacity, boolean value)
   :outertype: PtrFactory

   Create a new boolean pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created boolean array

newBoolArray
^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolArray(boolean[] buffer)
   :outertype: PtrFactory

   Create a new boolean pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created boolean array

newBoolPtr
^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom boolean pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created boolean pointer

newBoolReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolReference()
   :outertype: PtrFactory

   Create a new boolean reference.

   :return: newly created boolean reference

newBoolReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newBoolReference(boolean value)
   :outertype: PtrFactory

   Create a new boolean reference with an initial value.

   :param value: initial value
   :return: newly created boolean reference

newByteArray
^^^^^^^^^^^^

.. java:method:: public static final BytePtr newByteArray(int capacity)
   :outertype: PtrFactory

   Create a new byte pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created byte array

newByteArray
^^^^^^^^^^^^

.. java:method:: public static final BytePtr newByteArray(int capacity, byte value)
   :outertype: PtrFactory

   Create a new byte pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created byte array

newByteArray
^^^^^^^^^^^^

.. java:method:: public static final BytePtr newByteArray(byte[] buffer)
   :outertype: PtrFactory

   Create a new byte pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created byte array

newBytePtr
^^^^^^^^^^

.. java:method:: public static final BytePtr newBytePtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom byte pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created byte pointer

newBytePtr
^^^^^^^^^^

.. java:method:: public static final BytePtr newBytePtr(ByteBuffer buffer)
   :outertype: PtrFactory

   Create a new byte pointer from a java.nio.ByteBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newByteReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newByteReference()
   :outertype: PtrFactory

   Create a new byte reference.

   :return: newly created byte reference

newByteReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newByteReference(byte value)
   :outertype: PtrFactory

   Create a new byte reference with an initial value.

   :param value: initial value
   :return: newly created byte reference

newCharArray
^^^^^^^^^^^^

.. java:method:: public static final CharPtr newCharArray(int capacity)
   :outertype: PtrFactory

   Create a new char pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created char array

newCharArray
^^^^^^^^^^^^

.. java:method:: public static final CharPtr newCharArray(int capacity, char value)
   :outertype: PtrFactory

   Create a new char pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created char array

newCharArray
^^^^^^^^^^^^

.. java:method:: public static final CharPtr newCharArray(char[] buffer)
   :outertype: PtrFactory

   Create a new char pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created char array

newCharPtr
^^^^^^^^^^

.. java:method:: public static final CharPtr newCharPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom char pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created char pointer

newCharPtr
^^^^^^^^^^

.. java:method:: public static final CharPtr newCharPtr(CharBuffer buffer)
   :outertype: PtrFactory

   Create a new char pointer from a java.nio.CharBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newCharReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newCharReference()
   :outertype: PtrFactory

   Create a new char reference.

   :return: newly created char reference

newCharReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newCharReference(char value)
   :outertype: PtrFactory

   Create a new char reference with an initial value.

   :param value: initial value
   :return: newly created char reference

newDoubleArray
^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoubleArray(int capacity)
   :outertype: PtrFactory

   Create a new double pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created double array

newDoubleArray
^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoubleArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new double pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created double array

newDoubleArray
^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoubleArray(double[] buffer)
   :outertype: PtrFactory

   Create a new double pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created double array

newDoublePtr
^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoublePtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom double pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created double pointer

newDoublePtr
^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoublePtr(DoubleBuffer buffer)
   :outertype: PtrFactory

   Create a new double pointer from a java.nio.DoubleBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newDoubleReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoubleReference()
   :outertype: PtrFactory

   Create a new double reference.

   :return: newly created double reference

newDoubleReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newDoubleReference(double value)
   :outertype: PtrFactory

   Create a new double reference with an initial value.

   :param value: initial value
   :return: newly created double reference

newFloatArray
^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new float pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created float array

newFloatArray
^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatArray(int capacity, float value)
   :outertype: PtrFactory

   Create a new float pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created float array

newFloatArray
^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatArray(float[] buffer)
   :outertype: PtrFactory

   Create a new float pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created float array

newFloatPtr
^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom float pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created float pointer

newFloatPtr
^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatPtr(FloatBuffer buffer)
   :outertype: PtrFactory

   Create a new float pointer from a java.nio.FloatBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newFloatReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatReference()
   :outertype: PtrFactory

   Create a new float reference.

   :return: newly created float reference

newFloatReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newFloatReference(float value)
   :outertype: PtrFactory

   Create a new float reference with an initial value.

   :param value: initial value
   :return: newly created float reference

newGuardedBoolArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedBoolArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created boolean array

newGuardedBoolArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedBoolArray(int capacity, boolean value)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created boolean array

newGuardedBoolArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedBoolArray(boolean[] buffer)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created boolean array

newGuardedBoolReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedBoolReference()
   :outertype: PtrFactory

   Create a new guarded boolean reference.

   :return: newly created boolean reference

newGuardedBoolReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedBoolReference(boolean value)
   :outertype: PtrFactory

   Create a new guarded boolean reference with an initial value.

   :param value: initial value
   :return: newly created boolean reference

newGuardedByteArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedByteArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded byte pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created byte array

newGuardedByteArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedByteArray(int capacity, byte value)
   :outertype: PtrFactory

   Create a new guarded byte pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created byte array

newGuardedByteArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedByteArray(byte[] buffer)
   :outertype: PtrFactory

   Create a new guarded byte pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created byte array

newGuardedByteReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedByteReference()
   :outertype: PtrFactory

   Create a new guarded byte reference.

   :return: newly created byte reference

newGuardedByteReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedByteReference(byte value)
   :outertype: PtrFactory

   Create a new guarded byte reference with an initial value.

   :param value: initial value
   :return: newly created byte reference

newGuardedCharArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedCharArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded char pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created char array

newGuardedCharArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedCharArray(int capacity, char value)
   :outertype: PtrFactory

   Create a new guarded char pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created char array

newGuardedCharArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedCharArray(char[] buffer)
   :outertype: PtrFactory

   Create a new guarded char pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created char array

newGuardedCharReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedCharReference()
   :outertype: PtrFactory

   Create a new guarded char reference.

   :return: newly created char reference

newGuardedCharReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedCharReference(char value)
   :outertype: PtrFactory

   Create a new guarded char reference with an initial value.

   :param value: initial value
   :return: newly created char reference

newGuardedDoubleArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedDoubleArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded double pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created double array

newGuardedDoubleArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedDoubleArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new guarded double pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created double array

newGuardedDoubleArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedDoubleArray(double[] buffer)
   :outertype: PtrFactory

   Create a new guarded double pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created double array

newGuardedDoubleReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedDoubleReference()
   :outertype: PtrFactory

   Create a new guarded double reference.

   :return: newly created double reference

newGuardedDoubleReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedDoubleReference(double value)
   :outertype: PtrFactory

   Create a new guarded double reference with an initial value.

   :param value: initial value
   :return: newly created double reference

newGuardedFloatArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded float pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created float array

newGuardedFloatArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedFloatArray(int capacity, float value)
   :outertype: PtrFactory

   Create a new guarded float pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created float array

newGuardedFloatArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedFloatArray(float[] buffer)
   :outertype: PtrFactory

   Create a new guarded float pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created float array

newGuardedFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedFloatReference()
   :outertype: PtrFactory

   Create a new guarded float reference.

   :return: newly created float reference

newGuardedFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedFloatReference(float value)
   :outertype: PtrFactory

   Create a new guarded float reference with an initial value.

   :param value: initial value
   :return: newly created float reference

newGuardedIntArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded int pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created int array

newGuardedIntArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedIntArray(int capacity, int value)
   :outertype: PtrFactory

   Create a new guarded int pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created int array

newGuardedIntArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedIntArray(int[] buffer)
   :outertype: PtrFactory

   Create a new guarded int pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created int array

newGuardedIntReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedIntReference()
   :outertype: PtrFactory

   Create a new guarded int reference.

   :return: newly created int reference

newGuardedIntReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedIntReference(int value)
   :outertype: PtrFactory

   Create a new guarded int reference with an initial value.

   :param value: initial value
   :return: newly created int reference

newGuardedLongArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedLongArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded long pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created long array

newGuardedLongArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedLongArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded long pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created long array

newGuardedLongArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedLongArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded long pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created long array

newGuardedLongReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedLongReference()
   :outertype: PtrFactory

   Create a new guarded long reference.

   :return: newly created long reference

newGuardedLongReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedLongReference(long value)
   :outertype: PtrFactory

   Create a new guarded long reference with an initial value.

   :param value: initial value
   :return: newly created long reference

newGuardedNFloatArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedNFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NFloat array

newGuardedNFloatArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedNFloatArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NFloat array

newGuardedNFloatArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedNFloatArray(double[] buffer)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NFloat array

newGuardedNFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedNFloatReference()
   :outertype: PtrFactory

   Create a new guarded NFloat reference.

   :return: newly created NFloat reference

newGuardedNFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedNFloatReference(double value)
   :outertype: PtrFactory

   Create a new guarded NFloat reference with an initial value.

   :param value: initial value
   :return: newly created NFloat reference

newGuardedNIntArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedNIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NInt array

newGuardedNIntArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedNIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NInt array

newGuardedNIntArray
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedNIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NInt array

newGuardedNIntReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedNIntReference()
   :outertype: PtrFactory

   Create a new guarded NInt reference.

   :return: newly created NInt reference

newGuardedNIntReference
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedNIntReference(long value)
   :outertype: PtrFactory

   Create a new guarded NInt reference with an initial value.

   :param value: initial value
   :return: newly created NInt reference

newGuardedNUIntArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedNUIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NUInt array

newGuardedNUIntArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedNUIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NUInt array

newGuardedNUIntArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedNUIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NUInt array

newGuardedNUIntReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedNUIntReference()
   :outertype: PtrFactory

   Create a new guarded NUInt reference.

   :return: newly created NUInt reference

newGuardedNUIntReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedNUIntReference(long value)
   :outertype: PtrFactory

   Create a new guarded NUInt reference with an initial value.

   :param value: initial value
   :return: newly created NUInt reference

newGuardedObjectArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedObjectArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded object pointer with a specified capacity.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param capacity: number of elements to hold
   :return: newly created object array

newGuardedObjectArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedObjectArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded object pointer with a specified capacity and default value.

   :param <T>: Objective-C object's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created object array

newGuardedObjectArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedObjectArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded object pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param buffer: array to copy
   :return: newly created object array

newGuardedObjectReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedObjectReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded object reference.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :return: newly created object reference

newGuardedObjectReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedObjectReference(T value)
   :outertype: PtrFactory

   Create a new guarded object reference with an initial value.

   :param <T>: Objective-C object's class
   :param value: initial value
   :return: newly created object reference

newGuardedOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedOpaquePtrArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with a specified capacity.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param capacity: number of elements to hold
   :return: newly created opaque reference array

newGuardedOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedOpaquePtrArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with a specified capacity and default value.

   :param <T>: opaque pointer's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created opaque reference array

newGuardedOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedOpaquePtrArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param buffer: array to copy
   :return: newly created opaque reference array

newGuardedOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedOpaquePtrReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded opaque reference reference.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :return: newly created opaque reference reference

newGuardedOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedOpaquePtrReference(T value)
   :outertype: PtrFactory

   Create a new guarded opaque reference reference with an initial value.

   :param <T>: opaque pointer's class
   :param value: initial value
   :return: newly created opaque reference reference

newGuardedShortArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedShortArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded short pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created short array

newGuardedShortArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedShortArray(int capacity, short value)
   :outertype: PtrFactory

   Create a new guarded short pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created short array

newGuardedShortArray
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedShortArray(short[] buffer)
   :outertype: PtrFactory

   Create a new guarded short pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created short array

newGuardedShortReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedShortReference()
   :outertype: PtrFactory

   Create a new guarded short reference.

   :return: newly created short reference

newGuardedShortReference
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedShortReference(short value)
   :outertype: PtrFactory

   Create a new guarded short reference with an initial value.

   :param value: initial value
   :return: newly created short reference

newGuardedStructArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedStructArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded struct pointer with a specified capacity.

   :param <T>: struct's class
   :param type: type of the struct
   :param capacity: number of elements to hold
   :return: newly created struct array

newGuardedStructArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedStructArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded struct pointer with a specified capacity and default value.

   :param <T>: struct's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created struct array

newGuardedStructArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedStructArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded struct pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: struct's class
   :param type: type of the struct
   :param buffer: array to copy
   :return: newly created struct array

newGuardedStructReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedStructReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded struct reference.

   :param <T>: struct's class
   :param type: type of the struct
   :return: newly created struct reference

newGuardedStructReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedStructReference(T value)
   :outertype: PtrFactory

   Create a new guarded struct reference with an initial value.

   :param <T>: struct's class
   :param value: initial value
   :return: newly created struct reference

newGuardedWeakBoolArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedWeakBoolArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created boolean array

newGuardedWeakBoolArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedWeakBoolArray(int capacity, boolean value)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created boolean array

newGuardedWeakBoolArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedWeakBoolArray(boolean[] buffer)
   :outertype: PtrFactory

   Create a new guarded boolean pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created boolean array

newGuardedWeakBoolReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedWeakBoolReference()
   :outertype: PtrFactory

   Create a new guarded boolean reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created boolean reference

newGuardedWeakBoolReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newGuardedWeakBoolReference(boolean value)
   :outertype: PtrFactory

   Create a new guarded boolean reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created boolean reference

newGuardedWeakByteArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedWeakByteArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded byte pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created byte array

newGuardedWeakByteArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedWeakByteArray(int capacity, byte value)
   :outertype: PtrFactory

   Create a new guarded byte pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created byte array

newGuardedWeakByteArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedWeakByteArray(byte[] buffer)
   :outertype: PtrFactory

   Create a new guarded byte pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created byte array

newGuardedWeakByteReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedWeakByteReference()
   :outertype: PtrFactory

   Create a new guarded byte reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created byte reference

newGuardedWeakByteReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newGuardedWeakByteReference(byte value)
   :outertype: PtrFactory

   Create a new guarded byte reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created byte reference

newGuardedWeakCharArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedWeakCharArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded char pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created char array

newGuardedWeakCharArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedWeakCharArray(int capacity, char value)
   :outertype: PtrFactory

   Create a new guarded char pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created char array

newGuardedWeakCharArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedWeakCharArray(char[] buffer)
   :outertype: PtrFactory

   Create a new guarded char pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created char array

newGuardedWeakCharReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedWeakCharReference()
   :outertype: PtrFactory

   Create a new guarded char reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created char reference

newGuardedWeakCharReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newGuardedWeakCharReference(char value)
   :outertype: PtrFactory

   Create a new guarded char reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created char reference

newGuardedWeakDoubleArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedWeakDoubleArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded double pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created double array

newGuardedWeakDoubleArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedWeakDoubleArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new guarded double pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created double array

newGuardedWeakDoubleArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedWeakDoubleArray(double[] buffer)
   :outertype: PtrFactory

   Create a new guarded double pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created double array

newGuardedWeakDoubleReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedWeakDoubleReference()
   :outertype: PtrFactory

   Create a new guarded double reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created double reference

newGuardedWeakDoubleReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newGuardedWeakDoubleReference(double value)
   :outertype: PtrFactory

   Create a new guarded double reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created double reference

newGuardedWeakFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedWeakFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded float pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created float array

newGuardedWeakFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedWeakFloatArray(int capacity, float value)
   :outertype: PtrFactory

   Create a new guarded float pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created float array

newGuardedWeakFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedWeakFloatArray(float[] buffer)
   :outertype: PtrFactory

   Create a new guarded float pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created float array

newGuardedWeakFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedWeakFloatReference()
   :outertype: PtrFactory

   Create a new guarded float reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created float reference

newGuardedWeakFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newGuardedWeakFloatReference(float value)
   :outertype: PtrFactory

   Create a new guarded float reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created float reference

newGuardedWeakIntArray
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedWeakIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded int pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created int array

newGuardedWeakIntArray
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedWeakIntArray(int capacity, int value)
   :outertype: PtrFactory

   Create a new guarded int pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created int array

newGuardedWeakIntArray
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedWeakIntArray(int[] buffer)
   :outertype: PtrFactory

   Create a new guarded int pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created int array

newGuardedWeakIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedWeakIntReference()
   :outertype: PtrFactory

   Create a new guarded int reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created int reference

newGuardedWeakIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newGuardedWeakIntReference(int value)
   :outertype: PtrFactory

   Create a new guarded int reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created int reference

newGuardedWeakLongArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedWeakLongArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded long pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created long array

newGuardedWeakLongArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedWeakLongArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded long pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created long array

newGuardedWeakLongArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedWeakLongArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded long pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created long array

newGuardedWeakLongReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedWeakLongReference()
   :outertype: PtrFactory

   Create a new guarded long reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created long reference

newGuardedWeakLongReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newGuardedWeakLongReference(long value)
   :outertype: PtrFactory

   Create a new guarded long reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created long reference

newGuardedWeakNFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedWeakNFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NFloat array

newGuardedWeakNFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedWeakNFloatArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NFloat array

newGuardedWeakNFloatArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedWeakNFloatArray(double[] buffer)
   :outertype: PtrFactory

   Create a new guarded NFloat pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NFloat array

newGuardedWeakNFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedWeakNFloatReference()
   :outertype: PtrFactory

   Create a new guarded NFloat reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NFloat reference

newGuardedWeakNFloatReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newGuardedWeakNFloatReference(double value)
   :outertype: PtrFactory

   Create a new guarded NFloat reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NFloat reference

newGuardedWeakNIntArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedWeakNIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NInt array

newGuardedWeakNIntArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedWeakNIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NInt array

newGuardedWeakNIntArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedWeakNIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded NInt pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NInt array

newGuardedWeakNIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedWeakNIntReference()
   :outertype: PtrFactory

   Create a new guarded NInt reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NInt reference

newGuardedWeakNIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newGuardedWeakNIntReference(long value)
   :outertype: PtrFactory

   Create a new guarded NInt reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NInt reference

newGuardedWeakNUIntArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedWeakNUIntArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NUInt array

newGuardedWeakNUIntArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedWeakNUIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NUInt array

newGuardedWeakNUIntArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedWeakNUIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new guarded NUInt pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NUInt array

newGuardedWeakNUIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedWeakNUIntReference()
   :outertype: PtrFactory

   Create a new guarded NUInt reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NUInt reference

newGuardedWeakNUIntReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newGuardedWeakNUIntReference(long value)
   :outertype: PtrFactory

   Create a new guarded NUInt reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NUInt reference

newGuardedWeakObjectArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedWeakObjectArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded object pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param capacity: number of elements to hold
   :return: newly created object array

newGuardedWeakObjectArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedWeakObjectArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded object pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created object array

newGuardedWeakObjectArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedWeakObjectArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded object pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param buffer: array to copy
   :return: newly created object array

newGuardedWeakObjectReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedWeakObjectReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded object reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :return: newly created object reference

newGuardedWeakObjectReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newGuardedWeakObjectReference(T value)
   :outertype: PtrFactory

   Create a new guarded object reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param value: initial value
   :return: newly created object reference

newGuardedWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedWeakOpaquePtrArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param capacity: number of elements to hold
   :return: newly created opaque reference array

newGuardedWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedWeakOpaquePtrArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created opaque reference array

newGuardedWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedWeakOpaquePtrArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded opaque reference pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param buffer: array to copy
   :return: newly created opaque reference array

newGuardedWeakOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedWeakOpaquePtrReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded opaque reference reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :return: newly created opaque reference reference

newGuardedWeakOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newGuardedWeakOpaquePtrReference(T value)
   :outertype: PtrFactory

   Create a new guarded opaque reference reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param value: initial value
   :return: newly created opaque reference reference

newGuardedWeakShortArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedWeakShortArray(int capacity)
   :outertype: PtrFactory

   Create a new guarded short pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created short array

newGuardedWeakShortArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedWeakShortArray(int capacity, short value)
   :outertype: PtrFactory

   Create a new guarded short pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created short array

newGuardedWeakShortArray
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedWeakShortArray(short[] buffer)
   :outertype: PtrFactory

   Create a new guarded short pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created short array

newGuardedWeakShortReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedWeakShortReference()
   :outertype: PtrFactory

   Create a new guarded short reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created short reference

newGuardedWeakShortReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newGuardedWeakShortReference(short value)
   :outertype: PtrFactory

   Create a new guarded short reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created short reference

newGuardedWeakStructArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedWeakStructArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new guarded struct pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :param capacity: number of elements to hold
   :return: newly created struct array

newGuardedWeakStructArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedWeakStructArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new guarded struct pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created struct array

newGuardedWeakStructArray
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedWeakStructArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new guarded struct pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :param buffer: array to copy
   :return: newly created struct array

newGuardedWeakStructReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedWeakStructReference(Class<T> type)
   :outertype: PtrFactory

   Create a new guarded struct reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :return: newly created struct reference

newGuardedWeakStructReference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newGuardedWeakStructReference(T value)
   :outertype: PtrFactory

   Create a new guarded struct reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param value: initial value
   :return: newly created struct reference

newIntArray
^^^^^^^^^^^

.. java:method:: public static final IntPtr newIntArray(int capacity)
   :outertype: PtrFactory

   Create a new int pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created int array

newIntArray
^^^^^^^^^^^

.. java:method:: public static final IntPtr newIntArray(int capacity, int value)
   :outertype: PtrFactory

   Create a new int pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created int array

newIntArray
^^^^^^^^^^^

.. java:method:: public static final IntPtr newIntArray(int[] buffer)
   :outertype: PtrFactory

   Create a new int pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created int array

newIntPtr
^^^^^^^^^

.. java:method:: public static final IntPtr newIntPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom int pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created int pointer

newIntPtr
^^^^^^^^^

.. java:method:: public static final IntPtr newIntPtr(IntBuffer buffer)
   :outertype: PtrFactory

   Create a new int pointer from a java.nio.IntBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newIntReference
^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newIntReference()
   :outertype: PtrFactory

   Create a new int reference.

   :return: newly created int reference

newIntReference
^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newIntReference(int value)
   :outertype: PtrFactory

   Create a new int reference with an initial value.

   :param value: initial value
   :return: newly created int reference

newLongArray
^^^^^^^^^^^^

.. java:method:: public static final LongPtr newLongArray(int capacity)
   :outertype: PtrFactory

   Create a new long pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created long array

newLongArray
^^^^^^^^^^^^

.. java:method:: public static final LongPtr newLongArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new long pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created long array

newLongArray
^^^^^^^^^^^^

.. java:method:: public static final LongPtr newLongArray(long[] buffer)
   :outertype: PtrFactory

   Create a new long pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created long array

newLongPtr
^^^^^^^^^^

.. java:method:: public static final LongPtr newLongPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom long pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created long pointer

newLongPtr
^^^^^^^^^^

.. java:method:: public static final LongPtr newLongPtr(LongBuffer buffer)
   :outertype: PtrFactory

   Create a new long pointer from a java.nio.LongBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newLongReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newLongReference()
   :outertype: PtrFactory

   Create a new long reference.

   :return: newly created long reference

newLongReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newLongReference(long value)
   :outertype: PtrFactory

   Create a new long reference with an initial value.

   :param value: initial value
   :return: newly created long reference

newNFloatArray
^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new NFloat pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NFloat array

newNFloatArray
^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new NFloat pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NFloat array

newNFloatArray
^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatArray(double[] buffer)
   :outertype: PtrFactory

   Create a new NFloat pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NFloat array

newNFloatPtr
^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom NFloat pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created NFloat pointer

newNFloatReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatReference()
   :outertype: PtrFactory

   Create a new NFloat reference.

   :return: newly created NFloat reference

newNFloatReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newNFloatReference(double value)
   :outertype: PtrFactory

   Create a new NFloat reference with an initial value.

   :param value: initial value
   :return: newly created NFloat reference

newNIntArray
^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntArray(int capacity)
   :outertype: PtrFactory

   Create a new NInt pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NInt array

newNIntArray
^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new NInt pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NInt array

newNIntArray
^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new NInt pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NInt array

newNIntPtr
^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom NInt pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created NInt pointer

newNIntReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntReference()
   :outertype: PtrFactory

   Create a new NInt reference.

   :return: newly created NInt reference

newNIntReference
^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newNIntReference(long value)
   :outertype: PtrFactory

   Create a new NInt reference with an initial value.

   :param value: initial value
   :return: newly created NInt reference

newNUIntArray
^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntArray(int capacity)
   :outertype: PtrFactory

   Create a new NUInt pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created NUInt array

newNUIntArray
^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new NUInt pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NUInt array

newNUIntArray
^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new NUInt pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created NUInt array

newNUIntPtr
^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom NUInt pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created NUInt pointer

newNUIntReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntReference()
   :outertype: PtrFactory

   Create a new NUInt reference.

   :return: newly created NUInt reference

newNUIntReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newNUIntReference(long value)
   :outertype: PtrFactory

   Create a new NUInt reference with an initial value.

   :param value: initial value
   :return: newly created NUInt reference

newObjectArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new object pointer with a specified capacity.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param capacity: number of elements to hold
   :return: newly created object array

newObjectArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new object pointer with a specified capacity and default value.

   :param <T>: Objective-C object's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created object array

newObjectArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new object pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param buffer: array to copy
   :return: newly created object array

newObjectPtr
^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectPtr(Class<T> type, int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom object pointer.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created object pointer

newObjectReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectReference(Class<T> type)
   :outertype: PtrFactory

   Create a new object reference.

   :param <T>: Objective-C object's class
   :param type: type of the object
   :return: newly created object reference

newObjectReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newObjectReference(T value)
   :outertype: PtrFactory

   Create a new object reference with an initial value.

   :param <T>: Objective-C object's class
   :param value: initial value
   :return: newly created object reference

newOpaquePtrArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new opaque reference pointer with a specified capacity.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param capacity: number of elements to hold
   :return: newly created opaque reference array

newOpaquePtrArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new opaque reference pointer with a specified capacity and default value.

   :param <T>: opaque pointer's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created opaque reference array

newOpaquePtrArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new opaque reference pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param buffer: array to copy
   :return: newly created opaque reference array

newOpaquePtrPtr
^^^^^^^^^^^^^^^

.. java:method:: @SuppressWarnings public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrPtr(Class<T> type, int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom opaque reference pointer.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created opaque reference pointer

newOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrReference(Class<T> type)
   :outertype: PtrFactory

   Create a new opaque reference reference.

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :return: newly created opaque reference reference

newOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newOpaquePtrReference(T value)
   :outertype: PtrFactory

   Create a new opaque reference reference with an initial value.

   :param <T>: opaque pointer's class
   :param value: initial value
   :return: newly created opaque reference reference

newPointerPtr
^^^^^^^^^^^^^

.. java:method:: public static final <T> Ptr<?> newPointerPtr(Class<T> type, int depth, int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom pointer pointer.

   :param <T>: Pointer's root element class
   :param type: type of the pointer
   :param depth: numbers of indirections
   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer pointer should manage memory
   :param guarded: \ ``true``\  if the pointer pointer should be guarded
   :return: newly created pointer pointer

newPtr
^^^^^^

.. java:method:: public static final VoidPtr newPtr(Buffer buffer)
   :outertype: PtrFactory

   Create a new pointer from a \ :java:ref:`Buffer`\  object.

   :param buffer: \ :java:ref:`Buffer`\  object
   :return: null if buffer is null, new pointer otherwise

newShortArray
^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortArray(int capacity)
   :outertype: PtrFactory

   Create a new short pointer with a specified capacity.

   :param capacity: number of elements to hold
   :return: newly created short array

newShortArray
^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortArray(int capacity, short value)
   :outertype: PtrFactory

   Create a new short pointer with a specified capacity and default value.

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created short array

newShortArray
^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortArray(short[] buffer)
   :outertype: PtrFactory

   Create a new short pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param buffer: array to copy
   :return: newly created short array

newShortPtr
^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortPtr(int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom short pointer.

   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created short pointer

newShortPtr
^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortPtr(ShortBuffer buffer)
   :outertype: PtrFactory

   Create a new short pointer from a java.nio.ShortBuffer.

   :param buffer: object to create the pointer from
   :return: newly created pointer representing the same memory as the specified buffer

newShortReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortReference()
   :outertype: PtrFactory

   Create a new short reference.

   :return: newly created short reference

newShortReference
^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newShortReference(short value)
   :outertype: PtrFactory

   Create a new short reference with an initial value.

   :param value: initial value
   :return: newly created short reference

newStructArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new struct pointer with a specified capacity.

   :param <T>: struct's class
   :param type: type of the struct
   :param capacity: number of elements to hold
   :return: newly created struct array

newStructArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new struct pointer with a specified capacity and default value.

   :param <T>: struct's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created struct array

newStructArray
^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new struct pointer with buffer as it's initial contents, this will completely copy the buffer.

   :param <T>: struct's class
   :param type: type of the struct
   :param buffer: array to copy
   :return: newly created struct array

newStructPtr
^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructPtr(Class<T> type, int capacity, boolean owned, boolean guarded)
   :outertype: PtrFactory

   Create a new custom struct pointer.

   :param <T>: struct's class
   :param type: type of the struct
   :param capacity: number of elements to hold
   :param owned: \ ``true``\  if the pointer object should manage memory
   :param guarded: \ ``true``\  if the pointer object should be guarded
   :return: newly created struct pointer

newStructReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructReference(Class<T> type)
   :outertype: PtrFactory

   Create a new struct reference.

   :param <T>: struct's class
   :param type: type of the struct
   :return: newly created struct reference

newStructReference
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newStructReference(T value)
   :outertype: PtrFactory

   Create a new struct reference with an initial value.

   :param <T>: struct's class
   :param value: initial value
   :return: newly created struct reference

newVoidPtr
^^^^^^^^^^

.. java:method:: public static final VoidPtr newVoidPtr(long peer)
   :outertype: PtrFactory

   Create a new void pointer with an address.

   :param peer: address of the pointer
   :return: new void pointer with an address

newWeakBoolArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newWeakBoolArray(int capacity)
   :outertype: PtrFactory

   Create a new boolean pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created boolean array

newWeakBoolArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newWeakBoolArray(int capacity, boolean value)
   :outertype: PtrFactory

   Create a new boolean pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created boolean array

newWeakBoolArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newWeakBoolArray(boolean[] buffer)
   :outertype: PtrFactory

   Create a new boolean pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created boolean array

newWeakBoolReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newWeakBoolReference()
   :outertype: PtrFactory

   Create a new boolean reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created boolean reference

newWeakBoolReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BoolPtr newWeakBoolReference(boolean value)
   :outertype: PtrFactory

   Create a new boolean reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created boolean reference

newWeakByteArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newWeakByteArray(int capacity)
   :outertype: PtrFactory

   Create a new byte pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created byte array

newWeakByteArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newWeakByteArray(int capacity, byte value)
   :outertype: PtrFactory

   Create a new byte pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created byte array

newWeakByteArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newWeakByteArray(byte[] buffer)
   :outertype: PtrFactory

   Create a new byte pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created byte array

newWeakByteReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newWeakByteReference()
   :outertype: PtrFactory

   Create a new byte reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created byte reference

newWeakByteReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final BytePtr newWeakByteReference(byte value)
   :outertype: PtrFactory

   Create a new byte reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created byte reference

newWeakCharArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newWeakCharArray(int capacity)
   :outertype: PtrFactory

   Create a new char pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created char array

newWeakCharArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newWeakCharArray(int capacity, char value)
   :outertype: PtrFactory

   Create a new char pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created char array

newWeakCharArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newWeakCharArray(char[] buffer)
   :outertype: PtrFactory

   Create a new char pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created char array

newWeakCharReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newWeakCharReference()
   :outertype: PtrFactory

   Create a new char reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created char reference

newWeakCharReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final CharPtr newWeakCharReference(char value)
   :outertype: PtrFactory

   Create a new char reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created char reference

newWeakDoubleArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newWeakDoubleArray(int capacity)
   :outertype: PtrFactory

   Create a new double pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created double array

newWeakDoubleArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newWeakDoubleArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new double pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created double array

newWeakDoubleArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newWeakDoubleArray(double[] buffer)
   :outertype: PtrFactory

   Create a new double pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created double array

newWeakDoubleReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newWeakDoubleReference()
   :outertype: PtrFactory

   Create a new double reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created double reference

newWeakDoubleReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final DoublePtr newWeakDoubleReference(double value)
   :outertype: PtrFactory

   Create a new double reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created double reference

newWeakFloatArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newWeakFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new float pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created float array

newWeakFloatArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newWeakFloatArray(int capacity, float value)
   :outertype: PtrFactory

   Create a new float pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created float array

newWeakFloatArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newWeakFloatArray(float[] buffer)
   :outertype: PtrFactory

   Create a new float pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created float array

newWeakFloatReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newWeakFloatReference()
   :outertype: PtrFactory

   Create a new float reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created float reference

newWeakFloatReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final FloatPtr newWeakFloatReference(float value)
   :outertype: PtrFactory

   Create a new float reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created float reference

newWeakIntArray
^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newWeakIntArray(int capacity)
   :outertype: PtrFactory

   Create a new int pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created int array

newWeakIntArray
^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newWeakIntArray(int capacity, int value)
   :outertype: PtrFactory

   Create a new int pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created int array

newWeakIntArray
^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newWeakIntArray(int[] buffer)
   :outertype: PtrFactory

   Create a new int pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created int array

newWeakIntReference
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newWeakIntReference()
   :outertype: PtrFactory

   Create a new int reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created int reference

newWeakIntReference
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final IntPtr newWeakIntReference(int value)
   :outertype: PtrFactory

   Create a new int reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created int reference

newWeakLongArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newWeakLongArray(int capacity)
   :outertype: PtrFactory

   Create a new long pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created long array

newWeakLongArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newWeakLongArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new long pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created long array

newWeakLongArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newWeakLongArray(long[] buffer)
   :outertype: PtrFactory

   Create a new long pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created long array

newWeakLongReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newWeakLongReference()
   :outertype: PtrFactory

   Create a new long reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created long reference

newWeakLongReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final LongPtr newWeakLongReference(long value)
   :outertype: PtrFactory

   Create a new long reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created long reference

newWeakNFloatArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newWeakNFloatArray(int capacity)
   :outertype: PtrFactory

   Create a new NFloat pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NFloat array

newWeakNFloatArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newWeakNFloatArray(int capacity, double value)
   :outertype: PtrFactory

   Create a new NFloat pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NFloat array

newWeakNFloatArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newWeakNFloatArray(double[] buffer)
   :outertype: PtrFactory

   Create a new NFloat pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NFloat array

newWeakNFloatReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newWeakNFloatReference()
   :outertype: PtrFactory

   Create a new NFloat reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NFloat reference

newWeakNFloatReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NFloatPtr newWeakNFloatReference(double value)
   :outertype: PtrFactory

   Create a new NFloat reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NFloat reference

newWeakNIntArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newWeakNIntArray(int capacity)
   :outertype: PtrFactory

   Create a new NInt pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NInt array

newWeakNIntArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newWeakNIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new NInt pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NInt array

newWeakNIntArray
^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newWeakNIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new NInt pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NInt array

newWeakNIntReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newWeakNIntReference()
   :outertype: PtrFactory

   Create a new NInt reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NInt reference

newWeakNIntReference
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NIntPtr newWeakNIntReference(long value)
   :outertype: PtrFactory

   Create a new NInt reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NInt reference

newWeakNUIntArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newWeakNUIntArray(int capacity)
   :outertype: PtrFactory

   Create a new NUInt pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created NUInt array

newWeakNUIntArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newWeakNUIntArray(int capacity, long value)
   :outertype: PtrFactory

   Create a new NUInt pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created NUInt array

newWeakNUIntArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newWeakNUIntArray(long[] buffer)
   :outertype: PtrFactory

   Create a new NUInt pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created NUInt array

newWeakNUIntReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newWeakNUIntReference()
   :outertype: PtrFactory

   Create a new NUInt reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created NUInt reference

newWeakNUIntReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final NUIntPtr newWeakNUIntReference(long value)
   :outertype: PtrFactory

   Create a new NUInt reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created NUInt reference

newWeakObjectArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newWeakObjectArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new object pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param capacity: number of elements to hold
   :return: newly created object array

newWeakObjectArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newWeakObjectArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new object pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created object array

newWeakObjectArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newWeakObjectArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new object pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :param buffer: array to copy
   :return: newly created object array

newWeakObjectReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newWeakObjectReference(Class<T> type)
   :outertype: PtrFactory

   Create a new object reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param type: type of the object
   :return: newly created object reference

newWeakObjectReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends ObjCObject> Ptr<T> newWeakObjectReference(T value)
   :outertype: PtrFactory

   Create a new object reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: Objective-C object's class
   :param value: initial value
   :return: newly created object reference

newWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newWeakOpaquePtrArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new opaque reference pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param capacity: number of elements to hold
   :return: newly created opaque reference array

newWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newWeakOpaquePtrArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new opaque reference pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created opaque reference array

newWeakOpaquePtrArray
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newWeakOpaquePtrArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new opaque reference pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :param buffer: array to copy
   :return: newly created opaque reference array

newWeakOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newWeakOpaquePtrReference(Class<T> type)
   :outertype: PtrFactory

   Create a new opaque reference reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param type: type of the opaque reference
   :return: newly created opaque reference reference

newWeakOpaquePtrReference
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends OpaquePtr> Ptr<T> newWeakOpaquePtrReference(T value)
   :outertype: PtrFactory

   Create a new opaque reference reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: opaque pointer's class
   :param value: initial value
   :return: newly created opaque reference reference

newWeakShortArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newWeakShortArray(int capacity)
   :outertype: PtrFactory

   Create a new short pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :return: newly created short array

newWeakShortArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newWeakShortArray(int capacity, short value)
   :outertype: PtrFactory

   Create a new short pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created short array

newWeakShortArray
^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newWeakShortArray(short[] buffer)
   :outertype: PtrFactory

   Create a new short pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param buffer: array to copy
   :return: newly created short array

newWeakShortReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newWeakShortReference()
   :outertype: PtrFactory

   Create a new short reference. The freeing of the allocated memory will not happen automatically!

   :return: newly created short reference

newWeakShortReference
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final ShortPtr newWeakShortReference(short value)
   :outertype: PtrFactory

   Create a new short reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param value: initial value
   :return: newly created short reference

newWeakStructArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newWeakStructArray(Class<T> type, int capacity)
   :outertype: PtrFactory

   Create a new struct pointer with a specified capacity. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :param capacity: number of elements to hold
   :return: newly created struct array

newWeakStructArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newWeakStructArray(int capacity, T value)
   :outertype: PtrFactory

   Create a new struct pointer with a specified capacity and default value. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param capacity: number of elements to hold
   :param value: initial value for the elements
   :return: newly created struct array

newWeakStructArray
^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newWeakStructArray(Class<T> type, T[] buffer)
   :outertype: PtrFactory

   Create a new struct pointer with buffer as it's initial contents, this will completely copy the buffer. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :param buffer: array to copy
   :return: newly created struct array

newWeakStructReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newWeakStructReference(Class<T> type)
   :outertype: PtrFactory

   Create a new struct reference. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param type: type of the struct
   :return: newly created struct reference

newWeakStructReference
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static final <T extends StructObject> Ptr<T> newWeakStructReference(T value)
   :outertype: PtrFactory

   Create a new struct reference with an initial value. The freeing of the allocated memory will not happen automatically!

   :param <T>: struct's class
   :param value: initial value
   :return: newly created struct reference

newWeakVoidPtr
^^^^^^^^^^^^^^

.. java:method:: public static final VoidPtr newWeakVoidPtr(long peer)
   :outertype: PtrFactory

   Create a new weak void pointer with an address. The freeing of the allocated memory will not happen automatically!

   :param peer: address of the pointer
   :return: new void pointer with an address

