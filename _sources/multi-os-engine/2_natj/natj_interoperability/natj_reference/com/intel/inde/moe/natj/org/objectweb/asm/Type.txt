.. java:import:: java.lang.reflect Constructor

.. java:import:: java.lang.reflect Method

Type
====

.. java:package:: com.intel.inde.moe.natj.org.objectweb.asm
   :noindex:

.. java:type:: public class Type

   A Java field or method type. This class can be used to make it easier to manipulate type and method descriptors.

   :author: Eric Bruneton, Chris Nokleberg

Fields
------
ARRAY
^^^^^

.. java:field:: public static final int ARRAY
   :outertype: Type

   The sort of array reference types. See \ :java:ref:`getSort <getSort>`\ .

BOOLEAN
^^^^^^^

.. java:field:: public static final int BOOLEAN
   :outertype: Type

   The sort of the \ ``boolean``\  type. See \ :java:ref:`getSort <getSort>`\ .

BOOLEAN_TYPE
^^^^^^^^^^^^

.. java:field:: public static final Type BOOLEAN_TYPE
   :outertype: Type

   The \ ``boolean``\  type.

BYTE
^^^^

.. java:field:: public static final int BYTE
   :outertype: Type

   The sort of the \ ``byte``\  type. See \ :java:ref:`getSort <getSort>`\ .

BYTE_TYPE
^^^^^^^^^

.. java:field:: public static final Type BYTE_TYPE
   :outertype: Type

   The \ ``byte``\  type.

CHAR
^^^^

.. java:field:: public static final int CHAR
   :outertype: Type

   The sort of the \ ``char``\  type. See \ :java:ref:`getSort <getSort>`\ .

CHAR_TYPE
^^^^^^^^^

.. java:field:: public static final Type CHAR_TYPE
   :outertype: Type

   The \ ``char``\  type.

DOUBLE
^^^^^^

.. java:field:: public static final int DOUBLE
   :outertype: Type

   The sort of the \ ``double``\  type. See \ :java:ref:`getSort <getSort>`\ .

DOUBLE_TYPE
^^^^^^^^^^^

.. java:field:: public static final Type DOUBLE_TYPE
   :outertype: Type

   The \ ``double``\  type.

FLOAT
^^^^^

.. java:field:: public static final int FLOAT
   :outertype: Type

   The sort of the \ ``float``\  type. See \ :java:ref:`getSort <getSort>`\ .

FLOAT_TYPE
^^^^^^^^^^

.. java:field:: public static final Type FLOAT_TYPE
   :outertype: Type

   The \ ``float``\  type.

INT
^^^

.. java:field:: public static final int INT
   :outertype: Type

   The sort of the \ ``int``\  type. See \ :java:ref:`getSort <getSort>`\ .

INT_TYPE
^^^^^^^^

.. java:field:: public static final Type INT_TYPE
   :outertype: Type

   The \ ``int``\  type.

LONG
^^^^

.. java:field:: public static final int LONG
   :outertype: Type

   The sort of the \ ``long``\  type. See \ :java:ref:`getSort <getSort>`\ .

LONG_TYPE
^^^^^^^^^

.. java:field:: public static final Type LONG_TYPE
   :outertype: Type

   The \ ``long``\  type.

METHOD
^^^^^^

.. java:field:: public static final int METHOD
   :outertype: Type

   The sort of method types. See \ :java:ref:`getSort <getSort>`\ .

OBJECT
^^^^^^

.. java:field:: public static final int OBJECT
   :outertype: Type

   The sort of object reference types. See \ :java:ref:`getSort <getSort>`\ .

SHORT
^^^^^

.. java:field:: public static final int SHORT
   :outertype: Type

   The sort of the \ ``short``\  type. See \ :java:ref:`getSort <getSort>`\ .

SHORT_TYPE
^^^^^^^^^^

.. java:field:: public static final Type SHORT_TYPE
   :outertype: Type

   The \ ``short``\  type.

VOID
^^^^

.. java:field:: public static final int VOID
   :outertype: Type

   The sort of the \ ``void``\  type. See \ :java:ref:`getSort <getSort>`\ .

VOID_TYPE
^^^^^^^^^

.. java:field:: public static final Type VOID_TYPE
   :outertype: Type

   The \ ``void``\  type.

Methods
-------
equals
^^^^^^

.. java:method:: @Override public boolean equals(Object o)
   :outertype: Type

   Tests if the given object is equal to this type.

   :param o: the object to be compared to this type.
   :return: \ ``true``\  if the given object is equal to this type.

getArgumentTypes
^^^^^^^^^^^^^^^^

.. java:method:: public static Type[] getArgumentTypes(String methodDescriptor)
   :outertype: Type

   Returns the Java types corresponding to the argument types of the given method descriptor.

   :param methodDescriptor: a method descriptor.
   :return: the Java types corresponding to the argument types of the given method descriptor.

getArgumentTypes
^^^^^^^^^^^^^^^^

.. java:method:: public static Type[] getArgumentTypes(Method method)
   :outertype: Type

   Returns the Java types corresponding to the argument types of the given method.

   :param method: a method.
   :return: the Java types corresponding to the argument types of the given method.

getArgumentTypes
^^^^^^^^^^^^^^^^

.. java:method:: public Type[] getArgumentTypes()
   :outertype: Type

   Returns the argument types of methods of this type. This method should only be used for method types.

   :return: the argument types of methods of this type.

getArgumentsAndReturnSizes
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static int getArgumentsAndReturnSizes(String desc)
   :outertype: Type

   Computes the size of the arguments and of the return value of a method.

   :param desc: the descriptor of a method.
   :return: the size of the arguments of the method (plus one for the implicit this argument), argSize, and the size of its return value, retSize, packed into a single int i = \ ``(argSize << 2) | retSize``\  (argSize is therefore equal to \ ``i >> 2``\ , and retSize to \ ``i & 0x03``\ ).

getArgumentsAndReturnSizes
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public int getArgumentsAndReturnSizes()
   :outertype: Type

   Returns the size of the arguments and of the return value of methods of this type. This method should only be used for method types.

   :return: the size of the arguments (plus one for the implicit this argument), argSize, and the size of the return value, retSize, packed into a single int i = \ ``(argSize << 2) | retSize``\  (argSize is therefore equal to \ ``i >> 2``\ , and retSize to \ ``i & 0x03``\ ).

getClassName
^^^^^^^^^^^^

.. java:method:: public String getClassName()
   :outertype: Type

   Returns the binary name of the class corresponding to this type. This method must not be used on method types.

   :return: the binary name of the class corresponding to this type.

getConstructorDescriptor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public static String getConstructorDescriptor(Constructor<?> c)
   :outertype: Type

   Returns the descriptor corresponding to the given constructor.

   :param c: a \ :java:ref:`Constructor <Constructor>`\  object.
   :return: the descriptor of the given constructor.

getDescriptor
^^^^^^^^^^^^^

.. java:method:: public String getDescriptor()
   :outertype: Type

   Returns the descriptor corresponding to this Java type.

   :return: the descriptor corresponding to this Java type.

getDescriptor
^^^^^^^^^^^^^

.. java:method:: public static String getDescriptor(Class<?> c)
   :outertype: Type

   Returns the descriptor corresponding to the given Java type.

   :param c: an object class, a primitive class or an array class.
   :return: the descriptor corresponding to the given class.

getDimensions
^^^^^^^^^^^^^

.. java:method:: public int getDimensions()
   :outertype: Type

   Returns the number of dimensions of this array type. This method should only be used for an array type.

   :return: the number of dimensions of this array type.

getElementType
^^^^^^^^^^^^^^

.. java:method:: public Type getElementType()
   :outertype: Type

   Returns the type of the elements of this array type. This method should only be used for an array type.

   :return: Returns the type of the elements of this array type.

getInternalName
^^^^^^^^^^^^^^^

.. java:method:: public String getInternalName()
   :outertype: Type

   Returns the internal name of the class corresponding to this object or array type. The internal name of a class is its fully qualified name (as returned by Class.getName(), where '.' are replaced by '/'. This method should only be used for an object or array type.

   :return: the internal name of the class corresponding to this object type.

getInternalName
^^^^^^^^^^^^^^^

.. java:method:: public static String getInternalName(Class<?> c)
   :outertype: Type

   Returns the internal name of the given class. The internal name of a class is its fully qualified name, as returned by Class.getName(), where '.' are replaced by '/'.

   :param c: an object or array class.
   :return: the internal name of the given class.

getMethodDescriptor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static String getMethodDescriptor(Type returnType, Type... argumentTypes)
   :outertype: Type

   Returns the descriptor corresponding to the given argument and return types.

   :param returnType: the return type of the method.
   :param argumentTypes: the argument types of the method.
   :return: the descriptor corresponding to the given argument and return types.

getMethodDescriptor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static String getMethodDescriptor(Method m)
   :outertype: Type

   Returns the descriptor corresponding to the given method.

   :param m: a \ :java:ref:`Method <Method>`\  object.
   :return: the descriptor of the given method.

getMethodType
^^^^^^^^^^^^^

.. java:method:: public static Type getMethodType(String methodDescriptor)
   :outertype: Type

   Returns the Java type corresponding to the given method descriptor. Equivalent to \ ``Type.getType(methodDescriptor)``\ .

   :param methodDescriptor: a method descriptor.
   :return: the Java type corresponding to the given method descriptor.

getMethodType
^^^^^^^^^^^^^

.. java:method:: public static Type getMethodType(Type returnType, Type... argumentTypes)
   :outertype: Type

   Returns the Java method type corresponding to the given argument and return types.

   :param returnType: the return type of the method.
   :param argumentTypes: the argument types of the method.
   :return: the Java type corresponding to the given argument and return types.

getObjectType
^^^^^^^^^^^^^

.. java:method:: public static Type getObjectType(String internalName)
   :outertype: Type

   Returns the Java type corresponding to the given internal name.

   :param internalName: an internal name.
   :return: the Java type corresponding to the given internal name.

getReturnType
^^^^^^^^^^^^^

.. java:method:: public static Type getReturnType(String methodDescriptor)
   :outertype: Type

   Returns the Java type corresponding to the return type of the given method descriptor.

   :param methodDescriptor: a method descriptor.
   :return: the Java type corresponding to the return type of the given method descriptor.

getReturnType
^^^^^^^^^^^^^

.. java:method:: public static Type getReturnType(Method method)
   :outertype: Type

   Returns the Java type corresponding to the return type of the given method.

   :param method: a method.
   :return: the Java type corresponding to the return type of the given method.

getReturnType
^^^^^^^^^^^^^

.. java:method:: public Type getReturnType()
   :outertype: Type

   Returns the return type of methods of this type. This method should only be used for method types.

   :return: the return type of methods of this type.

getSize
^^^^^^^

.. java:method:: public int getSize()
   :outertype: Type

   Returns the size of values of this type. This method must not be used for method types.

   :return: the size of values of this type, i.e., 2 for \ ``long``\  and \ ``double``\ , 0 for \ ``void``\  and 1 otherwise.

getSort
^^^^^^^

.. java:method:: public int getSort()
   :outertype: Type

   Returns the sort of this Java type.

   :return: \ :java:ref:`VOID <VOID>`\ , \ :java:ref:`BOOLEAN <BOOLEAN>`\ , \ :java:ref:`CHAR <CHAR>`\ , \ :java:ref:`BYTE <BYTE>`\ , \ :java:ref:`SHORT <SHORT>`\ , \ :java:ref:`INT <INT>`\ , \ :java:ref:`FLOAT <FLOAT>`\ , \ :java:ref:`LONG <LONG>`\ , \ :java:ref:`DOUBLE <DOUBLE>`\ , \ :java:ref:`ARRAY <ARRAY>`\ , \ :java:ref:`OBJECT <OBJECT>`\  or \ :java:ref:`METHOD <METHOD>`\ .

getType
^^^^^^^

.. java:method:: public static Type getType(String typeDescriptor)
   :outertype: Type

   Returns the Java type corresponding to the given type descriptor.

   :param typeDescriptor: a field or method type descriptor.
   :return: the Java type corresponding to the given type descriptor.

getType
^^^^^^^

.. java:method:: public static Type getType(Class<?> c)
   :outertype: Type

   Returns the Java type corresponding to the given class.

   :param c: a class.
   :return: the Java type corresponding to the given class.

getType
^^^^^^^

.. java:method:: public static Type getType(Constructor<?> c)
   :outertype: Type

   Returns the Java method type corresponding to the given constructor.

   :param c: a \ :java:ref:`Constructor <Constructor>`\  object.
   :return: the Java method type corresponding to the given constructor.

getType
^^^^^^^

.. java:method:: public static Type getType(Method m)
   :outertype: Type

   Returns the Java method type corresponding to the given method.

   :param m: a \ :java:ref:`Method <Method>`\  object.
   :return: the Java method type corresponding to the given method.

hashCode
^^^^^^^^

.. java:method:: @Override public int hashCode()
   :outertype: Type

   Returns a hash code value for this type.

   :return: a hash code value for this type.

toString
^^^^^^^^

.. java:method:: @Override public String toString()
   :outertype: Type

   Returns a string representation of this type.

   :return: the descriptor of this type.

