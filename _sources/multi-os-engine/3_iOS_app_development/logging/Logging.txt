..
	Copyright 2015 Intel Corporation


===================================================
Logging Alternatives for the Intel Multi-OS Engine
===================================================

Logging is an important part of any application. In this blog post we will look at a few alternatives to do logging with the Intel Multi-OS Engine:

- the Android logging API
- slf4j with either the simple logger or the Android logger implementation
- the log4j API with slf4j


Read on for more details. The sample code available `here`_.

.. _`here`: https://software.intel.com/sites/default/files/managed/fb/ed/Intel-Multi-OS-Engine-Logger-Samples.zip


Use the Android Logging API
----------------------------

If we are porting an Android app to iOS with the Multi-OS Engine, or we are simply familiar with the Android logging API, we can use it with the Multi-OS Engine as well.

#. First, we need to add the migeran-android-lib.jar file to the lib folder in our Multi-OS Engine project or module. This small library implements the Android logging API for iOS. The library is included in the sample code, that is attached to this post.
#. Right click on the jar file and choose "Add as Library..." from the context menu.

Now we can use the familiar `android.util.Log`_ class on iOS as well.

.. _`android.util.Log`: http://developer.android.com/reference/android/util/Log.html

The default log level is set to DEBUG, similar to Android. If we want to change it, then we just need to call the android.util.Log.setLogLevel static method in our app's main() method::

	public static void main(String[] args) {
		Log.setLogLevel(Log.ERROR);
		UIKit.UIApplicationMain(0, null, null, Main.class.getName());
	}

Use the slf4j Library
----------------------

The slf4j library (`http://slf4j.org`_) is a modern, typesafe logging library for Java apps. It is separated into an API jar and multiple backend jars. When we want to use slf4j, you select a specific backend. For the Multi-OS Engine we may use the following backends:

.. _`http://slf4j.org`: http://slf4j.org

- slf4j-simple, which simply logs to the standard error
- slf4j-android, which uses the Android logger implementation

In order to use slf4j, we need to add the correct dependencies to the build.gradle file of our project. We can do that by adding the following lines to the dependencies block::

	compile 'org.slf4j:slf4j-api:1.7.12'
	compile 'org.slf4j:slf4j-simple:1.7.12' // or compile 'org.slf4j:slf4j-android:1.7.12'
	
If we are using the simple backend, then a simplelogger.properties may be added to the src/main/resources folder in your project. It can be used to configure the format and loglevel of the backend. Here is a short example::

	# SLF4J's SimpleLogger configuration file
	# Simple implementation of Logger that sends all enabled log messages, for all defined loggers, to System.err.

	# Default logging detail level for all instances of SimpleLogger.
	# Must be one of ("trace", "debug", "info", "warn", or "error").
	# If not specified, defaults to "info".
	org.slf4j.simpleLogger.defaultLogLevel=debug

	# Set to true if you want the current date and time to be included in output messages.
	# Default is false, and will output the number of milliseconds elapsed since startup.
	org.slf4j.simpleLogger.showDateTime=true

	# The date and time format to be used in the output messages.
	# The pattern describing the date and time format is the same that is used in java.text.SimpleDateFormat.
	# If the format is not specified or is invalid, the default format is used.
	# The default format is yyyy-MM-dd HH:mm:ss:SSS Z.
	org.slf4j.simpleLogger.dateTimeFormat=yyyy-MM-dd HH:mm:ss:SSS Z

Finally, we only need to start using the slf4j API in our classes::

	private static org.slf4j.Logger LOG = org.slf4j.LoggerFactory
	.getLogger(AppViewController.class);

	public void test() {
		LOG.error("This is an error");
	}

Using the log4j API with slf4j
-------------------------------

While it is possible to use the log4j API with its original implementation, I don't recommend it, because it is much more complex than slf4j, and it requires a custom built version of the library.

Yet, we might need to use a component, that requires the log4j API. The solution is to use the log4j  API wrapper of slf4j. We just need to add one more line to the build.gradle file::

	compile 'org.slf4j:log4j-over-slf4j:1.7.12'

Now we can use the log4j API as well::

	private org.apache.log4j.Logger Log = org.apache.log4j.Logger.getLogger("AppViewController");

	public void test() {
		Log.error("Test");
	}

**Summary**

With the Multi-OS Engine (similarly to Android) we have multiple options for logging in our app. We may decide, whether we want to use the Android logger, slf4j or even the log4j APIs in our application.
	
.. toctree::
    :maxdepth: 2
