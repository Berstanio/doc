..
	Copyright 2015 Intel Corporation


=================================
Known issues and troubleshooting
=================================

Proxy settings
---------------

If you are behind proxy server, you may need to configure the proxy in four places:

1. System settings

Go to System Preferences -> Network -> WiFi/Ethernet -> Advanced -> Proxy Tab -> set HTTP/HTTPS/FTP proxies

.. image:: images/proxy1.png

.. highlight:: java

2. Bash proxy

Create ~/.bash_profile file and add these strings with your proxy settings::

	export HTTP_PROXY=your_http_proxy_server:proxy_port
	export HTTPS_PROXY=your_https_proxy_server:proxy_port
	export http_proxy=your_http_proxy_server:proxy_port
	export https_proxy=your_https_proxy_server:proxy_port

3. Gradle proxy

Create "gradle.properties" file in the folder ~/.gradle and add the following lines with proxy settings::

	systemProp.http.proxyHost=your_http_proxy_server 
	systemProp.http.proxyPort=proxy_port
	systemProp.https.proxyHost=your_https_proxy_server
	systemProp.https.proxyPort=proxy_port

4. Android Studio proxy settings

.. image:: images/proxy2.png
	
Multi-OS Engine Installation
---------------------------------

- In some rare cases, Multi-OS Engine plugins for Android Studio* cannot be installed automatically (for example if you use pre-release version of the Android Studio*; if Multi-OS Engine plugins could not be loaded previous time and plugins were disabled). After installation, please verify that two plugins "MOE Plugin" and "MOE Layout Editor" enabled in Android Studio*’s Preferences-> Plugins menu. If you cannot find them there, please install them manually using "Install plugin from disk" button from "<MOE install folder>/intellij_plugins" folder.

- If you logged in to Mac* OS system under "root" account, Android Studio* does not see INTEL_MULTI_OS_ENGINE_HOME environment variable and as a result, Multi-OS Engine plugins for Android Studio* are not functional. Please use regular user account to work with Multi-OS Engine product.
	
Integration with Android Studio
--------------------------------

- Multi-OS Engine samples require setting active JDK version to 1.8 manually in Android Studio*. “Invalid source release: 1.8” error occurs if it wasn’t done. To resolve this issue, go to Android Studio* to File -> Project Structure -> SDK Location -> JDK location and specify path to JDK 1.8.

- Info.plist (located at /path/to/application/MOE_module_name/Xcode/project_name/) should contains valid Bundle ID. Otherwise the error will occur during launching on device: "Application installation o device failed (Incorrect bundle id in your Info.plist file)". For more information please visit: `About Bundle IDs`_

- If you manually installed previous version of iOS Simulator (for example, iOS Simulator 8.3 to the system with installed iOS SDK 8.4), build project may fail with error "SDK 8.3 not found". The workaround is to specify explicitly installed iOS* SDK version in the build configuration.

- IPA build ("Export IPA for Application" item in Android Studio "Build" menu) may fail right after project import. The workaround is to press the "Project" tab in Android Studio on the left side, after that IPA export will be successful.

- IPA build ("Export IPA for Application" item in Android Studio "Build" menu) may fail after multiple builds. The workaround is to press the “Build->Clean Project” from Android Studio menu. After that IPA export will be successful.

- If gradle daemon is enabled, the build may fail with an error message like the following: Could not find "/../SharedFrameworks/DVTFoundation.framework". You can fix this by disabling gradle daemon: remove "org.gradle.daemon=true" line from the ~/.gradle/gradle.properties file.

- Disabling of the UI Transformer by removing "src/main/resources/layout" can cause the following build error: "Compilation failed. Unable to write to path: … MainUI.storyboard". The problem should disappear after removing all duplicate references to MainUI.storyboard in the Xcode project.

- When the debugger is not closed properly, it leaves the device in the state which will not allow you to restart and use the debugging again. This is true even if you reboot the device. One workaround is to debug projects from Xcode on the device. This will reset the state.

.. _About Bundle IDs: https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html#//apple_ref/doc/uid/TP40012582-CH28-SW8

Cloud build issues on Windows host
-----------------------------------

- Build error message **org.intel.xrt_builder.BuildException: Not received application url**. It means that the build in the cloud failed and you should check log file received from the cloud builder for exact build error. 	Link to the cloud build log could be found on "Intel Multi-OS Engine" build tab and also it's copied to a local drive to <project_root>/<ios_module>/build/logs/\*_FROM_CLOUD.txt. Common issues with building Xcode projects in the cloud are the following:

	- All source file and resources used in the Xcode project should be located within "<project_root>/<ios_module>/xcode" folder, otherwise they won't' be uploaded to the cloud builder and build will fail.
	- All paths to source files and resources should be relative to the Xcode project folder. If your Xcode project contains an absolute path, build will fail.
	- Avoid using backslashes in paths to source files, because Mac builders won't resolve such paths and build will fail.

- Error message **Failed to get debug server (debugserver_error_t returned -256)** during app launching from Android Studio on Windows. This message means that OS X debug server is not installed on your iOS device. Unfortunately currently it's not possible to install the debug server to iOS device from Windows host and you should connect your device to Mac OS X host first and then build and run any application using Xcode. Xcode will automatically install the debug server to the device and after that you can connect it to the Windows host and use "run" and "debug" buttons from Android Studio. Please note that the debug server will be removed (unmounted) from iOS after device reboot and you have to connect it to OS X host again to install the debug server.

- Your iOS device is not visible in Android Studio cloud build configuration ("Run on" section) and you receive the error "There are no devices connected". Possible reason: Apple iTunes is not installed on your Windows host. Please make sure that Apple iTunes and "Apple Mobile Device Support" component are installed. You can run iTunes to check that your iOS device is visible there.

- Error message "Failed to upgrade on device, ApplicationVerificationFailed (-402620395)". There could be two reason of this issue:

	- You built the app with Distribution certificate. It's not allowed to debug an app built with the distribution certificate, you should use iOS Developer certificate for debugging.
	- Application with the same name but built with another certificate or provisioning profile has been already installed on your iOS device. Please remove this application before running new application binary from Android Studio.

- Error message "Failed to get installation proxy (instproxy_client_start_service returned -256)" during app running on a device. It  could happen if you didn't press "Trust This Computer" on your iOS device.
	
- Error message **Application installation failed. Please make sure you have correct bundle id in your Info.plist file**. Make sure that bundle ID in your Info.plist (usually located at <project_root>/<ios_module>/xcode/<app_name> folder) is the same as bundle ID in your provisioning profile. You may generate provisioning profile with bundle ID equal to "*" to test apps with different bundle ID.

- I don't have Apple Developer Certificate. How to get it? Apple developer certificate is needed in order to run the code on a physical iPhone and iPad. Apple Mac machine and membership in Apple Developer Program ($99/year) are needed to generate P12 certificate and to submit your apps to the AppStore. If you either don't have Mac machine or don't want to pay for Apple Developer Program, there are two options:

	- It is possible to generate the certificate using "free" Apple developer account on Mac OS X with Xcode 7, but you will not be able to submit your application to AppStore using this certificate. 
	- If you have paid membership in Apple Developer Program, then you can generate the certificate and provisioning profile on your Windows machine, build an IPA file using Multi-OS Engine cloud build and then submit the IPA to AppStore using some 3rd party services.

Runtime
---------

- The only class loader the runtime supports is the bootstrap class loader. It constructs NoClassDefFoundError exceptions without detailed messages.
- The runtime is derived from Android ART and inherits most Java packages it implements. The preloaded-classes.txt file, which resides in the installation directory, contains the list of the implemented Java packages:

	- To use Java packages that are not on the list add them as external dependencies for your project.
	- If external dependencies for your project implement classes on the list, the build will fail (the dex2oat tool will fail with an error message like "dex2oat ... Check failed: method != NULL").

Apple iOS* API Bindings
------------------------

- Variable argument functions / methods with a va_list parameter (e.g. vprintf) are currently not handled by Nat/J, but the generator still generates a binding for them. Nat/J only handles the method(param1, ...) type variable argument functions at the moment.

- Using methods with Ptr<? extends ObjCObject> in applications targeting Mac OS X host can lead to crash with null pointer exception if you working with pointers returned from native, not created yourself.

- If a "Division by 0" exception occurs after an incorrect NatJ initialization, start working with NatJ by creating an Obj-C class that implements a UIApplicationDelegate interface.

- Missed NatJ annotations or misprints are not checked by the build system or NatJ initializer. Manually written methods with inaccuracies in annotation can lead to exceptions in runtime and undefined behavior.
- Double pointer to primitive types as a return value from methods of binded objects is not supported.
- Objects received from native level at first time while java class loader doesn’t load their java representation will be wrapped to ios.NSObject without the possibility of further cast. To avoid this you should directly touch such class before receiving. For example in static section like::

	static {
	Class.forName(A.class.getName());
	}

UI Binding Generator
---------------------

- Unstable work of UI binding generation feature. With correct .xib; .storyboard; .m; .h files UI binding generation procedure may require more than one attempt.

- For successful UI binding generation, all necessary files (.storyboard, .xib, .h, .m) should be placed in Xcode* project directory. In current version this feature do not support reference on files in Xcode project.

- UI binding generation for existing Java View Controller leads to that existing outlets and actions(in Java View Controller) stop working. The cause is difference in declarations of existing and generated outlets and actions. Workaround steps are the following:

	- Add annotation @Property to Java code for all generated outlets 
	- Add implementation to Java* code for all generated actions
	- Exclude native source files (with implementation of view controllers) form build procedure.

- Current implementation of wrapnatjgen only supports basic Obj-C protocol syntax. For example we support the following:

Obj-C code::

	@protocol MyProtocol @end

	@interface MyClass
	- (void)foo:(id<MyProtocol>)c;
	@end

Corresponding Java bindings code::
	
	interface MyProtocol {}

	class MyClass {
		void foo(MyProtocol c);
	}
	
Current implementation only checks class hierarchy and skips interface hierarchy. That is why the following example throw compilation error.

Obj-C code::

	@protocol MyProtocol3 @end

	@protocol MyProtocol4
	- (void)foo:(id<MyProtocol3>)c;
	@end

	@interface MyClass3 : NSObject<MyProtocol4>
	- (void)foo:(id<MyProtocol3>)c;
	@end

Corresponding Java bindings code::	

	interface MyProtocol3 {}

	interface MyProtocol4 {
		void foo(Object c);
	}

	class MyClass3 extends NSObject implements MyProtocol4 { // Java compilation error, foo(Object) not implemented
		void foo(MyProtocol3 c);
	}

Layout Editor
--------------

- For the correct rendering of widgets, you must have Android SDK* with exactly API level 22 installed.

- Constraints can be conflicted for difficult UI written in iXML. Xcode* cannot manage conflict situations with constraints. As a result, generated constraints do not match with Xcode* constraints.
	
.. toctree::
    :maxdepth: 2